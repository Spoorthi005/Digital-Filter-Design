module FIR_Filter (
    input clk,                 // Clock signal
    input rst,                 // Reset signal
    input signed [15:0] x_in,   // Input sample
    output reg signed [15:0] y_out // Filtered output
);
parameter signed [15:0] h0 = 16'd1, 
                            h1 = 16'd2, 
                            h2 = 16'd2, 
                            h3 = 16'd1;
reg signed [15:0] x [0:3];
integer i;
 always @(posedge clk or posedge rst) begin
        if (rst) begin
            // Reset filter states
            for (i = 0; i < 4; i = i + 1) begin
                x[i] <= 16'd0;
            end
            y_out <= 16'd0;
        end else begin
            // Shift input samples
            x[3] <= x[2];
            x[2] <= x[1];
            x[1] <= x[0];
            x[0] <= x_in;

            y_out <= (h0 * x[0]) + (h1 * x[1]) + (h2 * x[2]) + (h3 * x[3]);
        end
    end

endmodule
